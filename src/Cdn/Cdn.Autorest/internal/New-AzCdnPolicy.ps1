
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update policy with specified rule set name within a resource group.
.Description
Create or update policy with specified rule set name within a resource group.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICdnWebApplicationFirewallPolicy
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

CUSTOMRULE <ICustomRule[]>: List of rules
  Action <ActionType>: Describes what action to be applied when rule matches
  MatchCondition <IMatchCondition[]>: List of match conditions.
    MatchValue <String[]>: List of possible match values.
    MatchVariable <WafMatchVariable>: Match variable to compare against.
    Operator <Operator>: Describes operator to be matched
    [NegateCondition <Boolean?>]: Describes if the result of this condition should be negated.
    [Selector <String>]: Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
    [Transform <TransformType[]>]: List of transforms.
  Name <String>: Defines the name of the custom rule
  Priority <Int32>: Defines in what order this rule be evaluated in the overall list of custom rules
  [EnabledState <CustomRuleEnabledState?>]: Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.

MANAGEDRULESET <IManagedRuleSet[]>: List of rule sets.
  RuleSetType <String>: Defines the rule set type to use.
  RuleSetVersion <String>: Defines the version of the rule set to use.
  [AnomalyScore <Int32?>]: Verizon only : If the rule set supports anomaly detection mode, this describes the threshold for blocking requests.
  [RuleGroupOverride <IManagedRuleGroupOverride[]>]: Defines the rule overrides to apply to the rule set.
    RuleGroupName <String>: Describes the managed rule group within the rule set to override
    [Rule <IManagedRuleOverride[]>]: List of rules that will be disabled. If none specified, all rules in the group will be disabled.
      RuleId <String>: Identifier for the managed rule.
      [Action <ActionType?>]: Describes the override action to be applied when rule matches.
      [EnabledState <ManagedRuleEnabledState?>]: Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.

RATELIMITRULE <IRateLimitRule[]>: List of rules
  Action <ActionType>: Describes what action to be applied when rule matches
  MatchCondition <IMatchCondition[]>: List of match conditions.
    MatchValue <String[]>: List of possible match values.
    MatchVariable <WafMatchVariable>: Match variable to compare against.
    Operator <Operator>: Describes operator to be matched
    [NegateCondition <Boolean?>]: Describes if the result of this condition should be negated.
    [Selector <String>]: Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
    [Transform <TransformType[]>]: List of transforms.
  Name <String>: Defines the name of the custom rule
  Priority <Int32>: Defines in what order this rule be evaluated in the overall list of custom rules
  RateLimitDurationInMinute <Int32>: Defines rate limit duration. Default is 1 minute.
  RateLimitThreshold <Int32>: Defines rate limit threshold.
  [EnabledState <CustomRuleEnabledState?>]: Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
.Link
https://docs.microsoft.com/powershell/module/az.cdn/new-azcdnpolicy
#>
function New-AzCdnPolicy {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICdnWebApplicationFirewallPolicy])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('PolicyName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Path')]
    [System.String]
    # The name of the CdnWebApplicationFirewallPolicy.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Path')]
    [System.String]
    # Name of the Resource group within the Azure subscription.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Azure Subscription ID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [System.String]
    # Resource location.
    ${Location},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ICustomRule[]]
    # List of rules
    # To construct, see NOTES section for CUSTOMRULE properties and create a hash table.
    ${CustomRule},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [System.String]
    # Gets a unique read-only string that changes whenever the resource is updated.
    ${Etag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IManagedRuleSet[]]
    # List of rule sets.
    # To construct, see NOTES section for MANAGEDRULESET properties and create a hash table.
    ${ManagedRuleSet},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [System.String]
    # If the action type is block, customer can override the response body.
    # The body must be specified in base64 encoding.
    ${PolicySettingDefaultCustomBlockResponseBody},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [System.Int32]
    # If the action type is block, this field defines the default customer overridable http response status code.
    ${PolicySettingDefaultCustomBlockResponseStatusCode},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [System.String]
    # If action type is redirect, this field represents the default redirect URL for the client.
    ${PolicySettingDefaultRedirectUrl},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.PolicyEnabledState])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.PolicyEnabledState]
    # describes if the policy is in enabled state or disabled state
    ${PolicySettingEnabledState},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.PolicyMode])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.PolicyMode]
    # Describes if it is in detection mode or prevention mode at policy level.
    ${PolicySettingMode},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.IRateLimitRule[]]
    # List of rules
    # To construct, see NOTES section for RATELIMITRULE properties and create a hash table.
    ${RateLimitRule},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.SkuName])]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.SkuName]
    # Name of the pricing tier.
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20210601.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            CreateExpanded = 'Az.Cdn.private\New-AzCdnPolicy_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
